<!--This Website is to help all the students learning C programming-->
<!DOCTYPE html>
<html>
<head>
<title> Operators</title>
</head>
<body>
<h1 style="text-align:center">OPERATORS</h1>
<h2><u>3.1 Arithmetic Operator</u></h2>
<ul>
	<li>Arithmetic operators are used for <b>Arithmetic Calculation.</b></li>
	<li>These are used to perform mathematical calculations like addition <b>(+)</b>, subtraction<b>(-)</b>, multiplication<b>(*)</b>, division<b>(/)</b> and modulus(remaider)<b>(%)</b>.</li>
</ul>
<h4><u>Example:</u></h4>
<pre>
#<b style="color:magenta">include</b>< stdio.h >
<b style="color:magenta">int</b> <b style="color:slateblue">main</b>()
{
	<b style="color:magenta">int</b> num1,num2;
	<b style="color:magenta">int</b> add,subs,mul,div,mod;
	
	<b style="color:red">printf</b>(<b style="color:green">"\nEnter First Number :"</b>);
	<b style="color:red">scanf</b>("%d",&num1);
	<b style="color:red">printf</b>("<b style="color:green">\nEnter Second Number :"</b>);
	<b style="color:red">scanf</b>("%d",&num2);
	//(+) operator
	add = num1+num2;
	<b style="color:red">printf</b>(<b style="color:green">"\nAddition is : %d"</b>,add);

	//(-) operator
	subs = num1-num2;
	<b style="color:red">printf</b>(<b style="color:green">"\nSubtraction is : %d"</b>,subs);

	//(*) operator
	mul = num1*num2;
	<b style="color:red">printf</b>(<b style="color:green">"\nMultiplication is : %d"</b>,mul);

	//(/) operator
	div = num1/num2;
	<b style="color:red">printf</b>(<b style="color:green">"\nDivision is : %d"</b>,div);

	//(%) operator
	mod = num1 % num2;
	<b style="color:red">printf</b>(<b style="color:green">"\nModulus is : %d"</b>,mod);
	<b style="color:magenta">return</b>(0);
}
</pre>
<table style="border:2px solid green">
<tr><td>
<h5><u>Output</u></h5>
<pre>
	Enter First Number:10	
	Enter Second Number:2	
	Addition is :12		
	Subtraction is :8	
	Multiplication is :20	
	Division is :5		
	Modulus is :2		
</td></tr></table>
</pre>
<h2><u>3.2 Assignment Operator</u></h2>
<ul>
	<li>Assignment operator is used to assign value to an variable.</li>
	<li>Example: a=b. Assigns values from right side operands to left side operand.</li>
	<li>Assignment operator is binary operator which operates on two operands(variable).</li>
</ul>
<h4><u>Example:</u></h4>

<pre>
<b style="color:magenta">int</b> <b style="color:slateblue">main</b>()
{
	<b style="color:magenta">int</b> a;
	//variable a is assigned integer value 55
	a=55;
	<b style="color:magenta">return</b>(0);
}
</pre>
<h2><u>3.3 Relational Operator</u></h2>
<p> Relational operators are used to compare the value of two variables.</p>
<img src="../images/RelationalOperators.png" height="70%" />
<h4><u>Example:</u></h4>
<pre>
#<b style="color:magenta">include</b>< stdio.h >
<b style="color:magenta">int</b> <b style="color:slateblue">main</b>()
{
	<b style="color:magenta">int</b> a = <b style="color:green">21</b>;
	<b style="color:magenta">int</b> b = <b style="color:green">10</b>;
	<b style="color:magenta">int</b> c;
	
	//== operator
	if ( a == b )
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is equal to b\n"</b>);
	}
	<b style="color:magenta">else</b>
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is not equal to b\n"</b>);
	}

	//< operator
	if ( a < b )
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is less than b\n"</b>);
	}
	<b style="color:magenta">else</b>
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is not not less than b\n"</b>);
	}

	//> operator
	if ( a > b )
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is greater than b\n"</b>);
	}
	<b style="color:magenta">else</b>
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is not not greater than b\n"</b>);
	}

	//lets change the value of a and b
	a = 5;
	b = 20;
	//<= operator
	if ( a <= b )
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is either less than or equal to b\n"</b>);
	}
	
	//>= operator
	if ( a >= b )
	{
		<b style="color:red">printf</b>(<b style="color:green">"a is either greater than or equal to b\n"</b>);
	}
	<b style="color:magenta">return</b>(0);
}
</pre>
<h5><u>Output</u></h5>
<pre>
<table style="border:2px solid green"><tr><td>
	a is not equal to b
	a is not less than b
	a is greater than b
	a is either less than or equal to b
	b is either greater than or equal to b	
</td></tr></table>
</pre>
<h2><u>3.4 Logical Operator</u></h2>
<p> Logical operators are used to perform logical operations on the given two variables.</p>
<table style="border:2px solid slateblue; border-collapse: collapse; text-align:center" width="50%">
	<tr>
	<th style="border:2px solid cyan">Operator</th>
	<th style="border:2px solid cyan;">Usage</th>
	</tr><tr>
	<td style="border:2px solid cyan">&&</td>
	<td style="border:2px solid cyan">expr1 && expr2</td>
	</tr><tr>
	<td style="border:2px solid cyan">||</td>
	<td style="border:2px solid cyan">expr1 || expr2</td>
	</tr><tr>
	<td style="border:2px solid cyan">!</td>
	<td style="border:2px solid cyan">!expr1</td>
	</tr>
</table>
<h4><u> Logical Operator chart:</u></h4>
<img src="https://petrusbuam.github.io/images/LogicalOperators.png" width="50%"/>
<h4><u>Example:</u></h4>
<pre>
a = 5;
b = 10;
(a == 5) && (b < 5) = <b style="color:magenta">false</b>
<b style="color:grey">/* here, first expression a == 5 is true
second expression b < 5 is false
so, final result of && operator is false (True && False = False) */</b>
(a == 4) && (b < 15) = <b style="color:magenta">false</b>
(a == 5) && (b < 15) = <b style="color:magenta">true</b>
(a == 4) && (b < 5) = <b style="color:magenta">false</b>

(a == 5) || (b < 5) = <b style="color:magenta">true</b>
(a == 4) || (b < 15) = <b style="color:magenta">true</b>
(a == 4) || (b < 5) = <b style="color:magenta">false</b>

!(a == 5) = <b style="color:magenta">false</b>
!(a == 4) = <b style="color:magenta">true</b>
</pre>
<h2><u>3.5 Increment & Decrement Operator</u></h2>
<ul>
	<li>Increment operator (++) increases the value of its operand by 1</li>
	<li>Decrement operator (--) decreases the value of its operand by 1</li>
</ul>
<h4><u>Example:</u></h4>
<pre>
<table style="border:2px solid green"><tr><td>
int x;
int y;

// Increment operators
x = 1;

y = ++x; // x is now 2, y is also 2
y = x++; // x is now 3, y is 2

// Decrement operators
x = 3;
y = x--; // x is now 2, y is 3 
y = --x; // x is now 1,y is also 1
</tr></td></table>
</pre>
<h2><u> 3.6 Bitwise Operator </u></h2>
<p> Bitwise operators perform manipulations of data at bit level. These operators also perform shifting of bits from right to left. Bitwise operators are not applied to float or double.</p>
<img src="../images/BitwiseOp.png"></img>
<h4><u> Explanation: </u></h4>
<p><b>& (Bitwise AND)</b> - The Bitwise AND will take pair of bits from each position, and if only both the bit is 1, the result on that position will be 1. Bitwise AND is used to Turn-Off bits.</p>
<pre>
<table style="border:2px solid slateblue"><tr><td>
int a = 10;	
int b = 12;
int c = a & b;

</table></tr></td>
</pre>
<h4> Calculation: </h4>
<pre>
<table style="border:2px solid black"> <tr> <td>
		     <b>   bit</b>
	a = 	       1010
	b =  & 	       1100	
	   --------------------
	c =            1000
	   --------------------
</table></tr></td>
<table style="border:2px solid black"><tr><td>
	value of c = 8;			
</table></tr></td>
</pre>
<p><b> | (Bitwise OR)</b> - 	The Bitwise OR, will take pair of bits from each position, and if any one of the bit is 1, 
				the result on that position will be 1 else 0.</p>
<pre>
<table style="border:2px solid green"><tr><td>
int a = 10;	
int b = 12;
int c = a | b;

</table></tr></td>
</pre> 
<h4> Calculation: </h4>
<pre>
<table style="border:2px solid black"> <tr> <td>
		     <b>   bit</b>
	a = 	       1010
	b =  | 	       1100	
	   --------------------
	c =            1110
	   --------------------
</table></tr></td>
<table style="border:2px solid black"><tr><td>
	value of c = 14;			
</table></tr></td></pre>
<p><b> ^ (Bitwise XOR)</b> - 	The Bitwise XOR will take pair of bits from each position, and if both the bits are different, 
				the result on that position will be 1. If both bits are same, then the result on that position is 0.</p>
<pre>
<table style="border:2px solid green"><tr><td>
int a = 10;	
int b = 12;
int c = a ^ b;

</table></tr></td>
</pre>
<h4> Calculation: </h4>
<pre>
<table style="border:2px solid black"> <tr> <td>
		     <b>   bit</b>
	a = 	       1010
	b =  ^ 	       1100	
	   --------------------
	c =            0110
	   --------------------
</table></tr></td>
<table style="border:2px solid black"><tr><td>
	value of c = 06;			
</table></tr></td></pre>
<p><b> << (Left shift)</b> - Left shift operator will shift the bits towards left for the given number of times.</p>
<pre>
<table style="border:2px solid green"><tr><td>
int a = 6;	
int b = a << 2;
</table></tr></td>
</pre>
<h4> Calculation: </h4>
<pre>
<table style="border:2px solid black"> <tr> <td>
	a = 6
	<b>Position</b> 7 6 5 4 3 2 1		
	6 in <b>bit</b> 0 0 0 0 <b>1 1</b> 0
	<b>Shifting 2 bit to left</b>
	<b>Position</b> 7 6 5 4 3 2 1 
	Result   0 0 <b>1 1 0 0 0</b> 
</table></tr></td>
<table style="border:2px solid black"><tr><td>
	value of b = 24;			
</table></tr></td></pre>
<p><b> >> (Right shift)</b> - Right shift operator will shift the bits towards right for the given number of times.</p>
<pre>
<table style="border:2px solid green"><tr><td>
int a = 6;	
int b = a >> 2;
</table></tr></td>
</pre>
<h4> Calculation: </h4>
<pre>
<table style="border:2px solid black"> <tr> <td>
	a = 6
	<b>Position</b> 7 6 5 4 3 2 1		
	6 in <b>bit</b> 0 0 0 0 <b>1 1</b> 0
	<b>Shifting 2 bit to right</b>
	<b>Position</b> 7 6 5 4 3 2 1 
	Result   0 0 0 0 0 0 <b>1</b>
</table></tr></td>
<table style="border:2px solid black"><tr><td>
	value of b = 1;			
</table></tr></td></pre>



<table style="border:2px solid green"><tr><td><a href="../index.htm">Home</a></td></tr></table>
</body>
</html>
