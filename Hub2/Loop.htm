<!--This Website is to help all the students learning C programming-->
<!DOCTYPE html>
<html>
<head>
<title>Loop</title>
</head>
<body>
<h1 style="text-align:center"><u>Loop</u></h1>
<h2><u>5.1 for Loop</u></h2>
<p>Loops are used to repeat a block of code.</p>
<h4><u>Syntax of Loop:</u></h4>
<pre><table style="border: 2px solid green"><tr><td>
	for(init;condition;increment)
		{
			//block of statement.
		}
</td></tr></table></pre>
<h4><u>Example:</u></h4>
<pre><table style="border: 2px solid green"><tr><td>
#include< stdio.h >

int main()
{
	int i;
	for(i=0;i<10;i++)
	{
		printf("%d ",i);
	}
	return 0;
}
</td></tr></table></pre>
<h4><u>Output:</u></h4>
<table style="border: 2px solid green"><tr><td>
	0123456789           	
</td></tr></table>
<h4><u>Explanation:</u></h4>
<p><b>init -</b>Initializes the variable  at the beginning of the loop to some value. This value is the starting point of the loop.<br>
<b>condition - </b>Decides whether the loop will continue running or not. While this condition is true, the loop will continue running.<br>
<b>increment -</b>The part of the loop that changes the value of the variable created in the variable declaration part of the loop. The increment
statement is the part of the loop which will eventually stop the loop from running.</p>

<h2><u>5.2 while Loop</u></h2>
<p>while loop statement in C programming language repeatedly executes a target statement as long as a given condition is true.</p>
<h4><u>Syntax:</u></h4>
<pre><table style="border: 2px solid green"><tr><td>
	while( condition )
		{
			statement.(s);
		}
</td></tr></table></pre>
<h4><u>Example:</u></h4>
<pre><table style="border: 2px solid green"><tr><td>
#include < stdio.h > 

int main () 
	{ 
		// local variable definition 
		int a = 1; 
		
		// while loop execution 
		while( a < 5 ) 
			{ 
				//loops comes inside this body, until condition is true 
				printf("Value of a: %d\n", a); 
				a++; 
			} 
	return 0; 
	}
</table></tr></td></pre>
<h4><u>Output</u></h4>
<pre><table style="border:2px solid green"><tr><td>
	Value of a:1		
	Value of a:2	
	Value of a:3	
	Value of a:4	
</table></tr></td></pre>

<h2><u>5.3 do-while Loop</u></h2>
<p>A do-while loop is similar to a while loop, except that a do-while loop is guaranteed to execute at least one time. 
The conditional expression appears at the end of the loop, so the statement(s) in the loop execute once before the condition is tested.</p>
<h4><u>Syntax:</u></h4>
<pre><table style="border: 2px solid green"><tr><td>
	do
		{
			statement(s);
		} while ( condition );	
</td></tr></table></pre>
<h4><u>Example:</u></h4>
<pre><table style="border:2px solid green"> <tr><td>
#include < stdio.h > 
int main () 
	{ 
		// declared local operand (variable) 
		int a = 1; 

		// do-while loop 
		do 
			{ 
				printf("value of a: %d\n", a); 
				a = a + 1;
		 	} while( a < 5 ); 
		return 0; 
	} 
</table></tr></td></pre>
<h4><u>Output</u></h4>
<pre><table style="border:2px solid green"><tr><td>
	Value of a:1		
	Value of a:2	
	Value of a:3	
	Value of a:4	
</table></tr></td></pre>
<h4><u>One more Example where condition is false :</u></h4>
<pre><table style="border:2px solid green"> <tr> <td>
#include < stdio.h > 
int main () 
	{ 
	// declared local operand (variable) 
	int a = 1; 
	
	//here, Condition is false. a is not equals to zero 
	do 
		{ 
			printf("value of a: %d\n", a); 
			a = a + 1; 
		} while( a == 0 ); 
	return 0; 
	} 
</table></tr></td></pre>
<h4><u>Output</u></h4>
<pre><table style="border:2px solid green"><tr><td>
	Value of a:1			
</table></tr></td></pre>

<h2><u>5.4 break, continue, goto keywords</u></h2>
<h4> <u>break keyword </u></h4>
<p>break statement neglect the statement after it and exit compound statement. in the loop and transfer the control outside the loop
Break it's sole purpose to passes control out of the compound statement i.e. Loop, Condition, Method or Procedures.</p>
<h4><u>Example:</u></h4>
<pre><table style="border:2px solid green"><tr><td>
while(a) 
	{ 
		while(b) 
		{ 
			if(b == 10) 
			{ 
				break; 
			} 	
		} 
	// break will bring us here. 
	} 
</table></tr></td></pre>
<h4><u>continue keyword</u></h4>
<p>Similar,To break statement continuestatement also neglect the statement after 
it in the loop and send control back to starting point of loop for next iteration instead of outside the loop.</p>
<h4><u>Example</u></h4>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
int main () 
	{ 
	int a = 10; 
	while(a < 20) 
		{ 
			if( a == 15) 
			{ 
				// skip the iteration 
				a = a + 1; 
				continue; 
			} 
			printf("value of a: %d\n", a); 
			a++; 
		} 	
		return 0; 
	} 
</table></tr></td></pre>
<h4><u>Output</u></h4>
<pre><table style="border:2px solid green"><tr><td>
	value of a: 10 
	value of a: 11 
	value of a: 12 
	value of a: 13 
	value of a: 14 
	value of a: 16 
	value of a: 17 
	value of a: 18 
	value of a: 19
</table></tr></td></pre>
<h4><u>goto</u></h4>
<ul>
	<li>goto statement transfer the control to the label specified with the goto statement</li>
	<li>label is any name give to particular part in program</li>
	<li>label is followed with a colon (:)</li>
</ul>
<h4><u>Syntax:</u></h4>
<pre><table style="border:2px solid green"><tr><td>
label1:
-
-
goto label1;	
</table></tr></td></pre>
<h4> <u>Example</u> </h4>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
int main() 
	{ 
	int i, j; 
	for ( i = 0; i < 10; i++ ) 
	{ 
		printf( "Outer loop executing. i = %d\n", i );
	 	for ( j = 0; j < 3; j++ ) 
			{ 
				printf(" Inner loop executing. j = %d\n", j ); 
				if ( i == 5 ) 
				{ 
					goto stop; 
				} 
			} 
	} 
	// This message does not print. 
	printf( "Loop exited. i = %d\n", i ); 
	stop: 
		printf( "Jumped to stop. i = %d\n", i ); 
	} 
</table></tr></td></pre>
<h4><u>Output</u></h4>
<pre><table style="border:2px solid green"><tr><td>
	Outer loop executing. i = 0 
	Inner loop executing. j = 0 
	Inner loop executing. j = 1 
	Inner loop executing. j = 2 
	Outer loop executing. i = 1 
	Inner loop executing. j = 0 
	Inner loop executing. j = 1 
	Inner loop executing. j = 2 
	Outer loop executing. i = 2 
	Inner loop executing. j = 0 
	Inner loop executing. j = 1 
	Inner loop executing. j = 2 
	Outer loop executing. i = 3 
	Inner loop executing. j = 0 
	Inner loop executing. j = 1 
	Inner loop executing. j = 2 
	Outer loop executing. i = 4 
	Inner loop executing. j = 0 
	Inner loop executing. j = 1 
	Inner loop executing. j = 2 
	Outer loop executing. i = 5 Inner loop executing. j = 0 
	Jumped to stop. i = 5
</table></tr></td></pre>

<table style="border:2px solid green"><tr><td><a href="HomePage.htm">Home</a></td></tr></table>
</body>
</body>
</html>