<!--This Website is to help all the students learning C programming-->
<!DOCTYPE html>
<html>
<head>
<title> Pointers </title>
</head>
<body>
<h1 style="text-align:center"> Pointers </h1>
<h2><u>8.1 Introduction</u></h2>
<h3>What are Pointers</h3>
<p>Pointer is a variable that points to an address off value.<b>Pointer => address that contains the value</b></p>
<p><u><b>Symbols used in pointer:</b></u><br>
<b>&</b>(ampersand sign): 'Address of operator'. It determines the address of a variable.<br>
<b>*</b>(asterisk sign): indirection operator/value at address. Accesses the value at the address.</p>
<h4>Example:</h4>
<pre>
	int i = 3;
</pre>
<ul>This declaration tells the C compiler to :-
	<li>Reserve space in memory to hold the integer value.</li>
	<li>Associate the name i with this memory location.</li>
	<li>Store the value 3 at this location.</li>
<p>We may represent the location of i in the memory by :-</p>
<img src="MemoryLocation.jpg"/>
	<li>The computer has selected memory location 65524 as the place to store the value 3.</li>
	<li>The location number 65524 is not a number to be relied upon, because some other time the computer may choose a different location for storing the value 3.</li>
	<li>The important point is, i’s address in memory is a number.
</li>
</ul>
<h4>Example :</h4>
<pre>
#include < stdio.h > 
#include < conio.h > 
void main() 
{ int i = 3 ; 
	printf ( "\nAddress of i = %u", &i); 
	printf ( "\nValue of i = %d", i); 
	printf ( "\nValue of i = %d", *(&i)); 
} 
</pre>
<h4>Output :</h4>
<pre>
	Address of i = 65524 
	Value of i = 3 
</pre>
<h4>Explanation :</h4>
<ul>
	<li>The pointer points to the address 65524 of variable i, that contains the value of i i.e 3</li>
	<li>Pointer points to ->65524 address that points to =>value 3</li>
	<li>&i gives the address of the variable i.</li>
	<li>*i gives the value store at the address of i.</li>
	<li>‘&’ => ‘address of ’ operator.</li>
	<li>The expression &i in the first printf() statement returns the address of the variable i, which in this case happens to be 65524.</li>
	<li>As 65524 is an address, there is no sign associated with it. So to print the address we use ‘%u’ which is a format specifier for printing an unsigned integer.</li>
	<li>The another pointer operator is ‘*’called ‘value at address’ operator which gives the value stored at a particular address.</li>
	<li>The ‘value at address’ operator is also called ‘indirection’ operator.</li>
	<li>*(&i) is same as printing the value of i.</li>
</ul>
<h2> <u>8.2 Pointer declaration</u></h2>
<h3> Declaring a Pointer </h3>
<h4><u> Syntax :</u></h4>
<p>datatype *variable_name; //pointer to datatype</p>
<h4>Example:</h4>
<pre>
	int *j; //pointer to integer
</pre>
<ul>
	<li>This means the value at the address contained in j is an int.</li>
	<li>This declaration tells the compiler that j will be used to store the address of an integer value.</li>
	<li>The j is called as pointer variable. This variables are capable of holding addresses.</li>
	<b>These addresses can be collected in a variable</b>. j = &i ; 
	<li>The variable j is called pointer variable that stores the address of ii.e 65524</li>
	<li>j(contains the address of i) points to -> the address of i , this points to => the value of i i.e 3 but the address of j is 65522.</li>
</ul>
<pre>
#include < stdio.h > 
#include < conio.h > 
void main() 
{ 
	int i = 3; 
	// store the address of an integer value 
	int *j; 
	clrscr(); 
	//stores the address of i variable 
	j=&i; 
	printf("Address of i variable is %x \n",&i); 
	printf("Address of j variable is %x \n",j); 
	printf("Value of j variable is %d \n",*j); 
	getch(); 
} 
</pre>
<h4>Output</h4>
<pre>
	Address of i variable is 65524 
	Address of j variable is 65522 
	Value of j variable is 3 
</pre>
<p>The Expression <b>*j</b> will give the value of <b>i</b>  i.e <b>3.</b> 

As <b>*</b> stands for <b>‘value at address’</b>. Means the j contains the address of variable <b>i</b>, 
so <b>*j</b> will give the value stored at that address which is there in <b>j</b> (i.e 65524 address contains value 3).</p>
<h2><u>8.3 Other ways to declare pointers</u></h2>
<pre>
	<b style="color:magenta">int</b> *i; 
	<b style="color:magenta">char</b> *ch; 
	<b style="color:magenta">float</b> *f; 
</pre>
<ul>
	<li> Here, i, ch and f are declared as pointer variables, i.e.variables capable of holding addresses.</li>
	<li> Remember that, addresses are always going to be whole numbers, therefore pointers always contain whole numbers.</li>
	<li> Now we can put these two facts together and say that the pointers are variables that contain addresses, and since addresses are always whole numbers, pointers would always contain whole numbers.</li>
	<li> The declaration float *f does not mean that f is going to contain a floating-point value. What it means is, f is going to contain the address of a floating-point value.</li>
	<li> Similarly, char *ch means that ch is going to contain the address of a char value.</li>
</ul>
<h1 style="text-align:center">Pointer to Pointer </h1>
<h2><u> 8.4 Pointer to Pointer </u></h2>
<p>Pointer is a variable that contains address of another variable. Now this variable itself might be another pointer. Thus, we now have a pointer that contains another pointer’s address.</p>
<h4>Example :</h4>
<pre>
#include < stdio.h > 
#include < conio.h > 
void main() 
{ 
	int i = 3, *j, **k ; 
	j = &i ; 
	k = &j ; 
	printf ( "\nAddress of i = %u", &i ) ; 
	printf ( "\nAddress of i = %u", j ) ; 
	printf ( "\nAddress of i = %u", *k ) ; 
	printf ( "\nAddress of j = %u", &j ) ; 
	printf ( "\nAddress of j = %u", k ) ; 
	printf ( "\nAddress of k = %u", &k ) ; 
	printf ( "\nValue of j = %u", j ) ; 
	printf ( "\nValue of k = %u", k ) ; 
	printf ( "\nValue of i = %d", i ) ; 
	printf ( "\nValue of i = %d", * ( &i ) ) ; 
	printf ( "\nValue of i = %d", *j ) ; 
	printf ( "\nValue of i = %d", **k ) ; 
} 
</pre>
<h4>Output:</h4>
<pre>
	Address of i = 65524 
	Address of i = 65524 
	Address of i = 65524 
	Address of j = 65522 
	Address of j = 65522 
	Address of k = 65520 
	Value of j = 65524 
	Value of k = 65522 
</pre>
<h4>Explanation:</h4>
<h4>Here the declaration as follows:</h4>
<pre>
	int i = 3; //i is an ordinary int, 
	int *j; //j is a pointer to an int 
	int **k; //k is a pointer to an integer pointer 
</pre>
<h4>Now initializations as follows:</h4>
<pre>
	j = &i ; //address of variable i is stored in j 
	k = &j ;//address of variable j is stored in k 
</pre>
<pre>
	printf ("\nAddress of k = %u", &k); will return address of k.
	printf ("\nAddress of j = %u", k); will return value of k or address of j.
	printf ("\nAddress of i = %u", *k); will return the address of i.
	*k = *(&j)=>(65522) will return value stored at this address of the variable j i.e 65524 = 65524
	printf ("\nValue of i = %d", **k); will return the value of i.
	**k = *(&j)=>[*(&j)] will give the value stored at the address of variable j i.e 65524 which is the address of variable i i.e &i.
	= *(&i) will give value stored at the address of variable i  i.e 3.
</pre>
<h1 style="text-align:center"> Pointer Arithmetic </h1>
<h2><u> 8.5 Pointer arithmetic </u></h2>
<p>The pointer holds address of a value, so there can be arithmetic operations on the pointer variable.Arithmetic operations possible on pointer in C language :</p>
<ul>
	<li>Increment</li>
	<li>Decrement</li>
	<li>Addition</li>
	<li>Subtraction</li>
</ul>
<h4>Increment:</h4>
<ul>
	<li>Incrementing a pointer is used in array because it is contiguous memory location.</li>
	<li>Increment operation depends on the data type of the pointer variable.</li>
</ul>
<p>The formula of incrementing pointer is given below:</p>
<pre><table style="border:2px solid green"><tr><td>
	new_address= current_address + i * size_of(data type)
</td></tr></table></pre>
<h4>Example:</h4>
<p>Incrementing pointer variable on 64 bit OS </p>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
#include < conio.h > 
void main() 
	{ 
	 int i = 3; 
	 int *j;//pointer to int 

	 j = &i;//stores the address of i variable 
	 printf("Address of i variable is %u \n", j); 
	 j = j+1; // incrementing pointer by 1(4 bytes) 
	 printf("After increment: Address of i variable is %u \n",j); 
	} 
</td></tr></table></pre>
<h4>Output</h4>
<pre><table style="border:2px solid green"><tr><td>
	Address of i variable is 65524 
	After increment: Address of i variable is 65528 
	Explanation : For 32 bit int variable, it will increment to 2 byte. 
	For 64 bit int variable, it will increment to 4 byte.	 
</td></tr></table></pre>
<h4>Decrement:</h4>
<p>The formula of decrementing pointer is given below :</p>
<pre><table style="border:2px solid green"><tr><td>
	new_address= current_address - i * size_of(data type)
</td></tr></table></pre>
<h4>Example:</h4>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
#include < conio.h > 
void main() 
	{ 
	 int i = 3; 
	 int *j;//pointer to int 
	 j = &i;//stores the address of i variable 
	 printf("Address of i variable is %u \n",j); 
	 j = j - 1; //decrementing pointer by 1(4 bytes) 
	 printf("After decrement: Address of i variable is %u \n",j); 
	} 
</td></tr></table></pre>
<h4>Output</h4>
<pre><table style="border:2px solid green"><tr><td>
	Address of i variable is 65524 
	After decrement: Address of i variable is 65520 
</td></tr></table></pre>
<h4>Pointer Addition</h4>
<p>We can add a value to the pointer variable.

The formula of adding value to pointer is given below :</p>
<pre><table style="border:2px solid green"><tr><td>
	new_address= current_address + (value * size_of(data type)) 
</td></tr></table></pre>
<h4>Example:</h4>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
#include < conio.h > 
void main() 
	{ 
	 int i = 3; 
	 int *j;//pointer to int 
	 j = &i;//stores the address of i variable 
	 printf("Address of i variable is %u \n", j); 
	 j = j+3; // incrementing pointer by 4*3=12 bytes 
	 printf("After increment: Address of i variable is %u \n",j); 
	} 
</td></tr></table></pre>
<h4>Output</h4>
<pre><table style="border:2px solid green"><tr><td>
	Address of i variable is 65524 
	After increment: Address of i variable is 65536 
</td></tr></table></pre>
<h4>Explanation :</h4>
	<p>For 32 bit int variable, it will add 2 * number.
For 64 bit int variable, it will add 4 * number.</p>
<h4>Pointer Subtraction</h4>
<p>Like pointer addition, we can subtract a value from the pointer variable.

The formula of subtracting value from pointer variable is given below :</p>
<pre><table style="border:2px solid green"><tr><td>
	new_address= current_address - (value * size_of(data type))  
</td></tr></table></pre>
<h4>Example:</h4>
<pre><table style="border:2px solid green"><tr><td>
#include < stdio.h > 
#include < conio.h > 
void main() 
	{ 
	 int i = 3; 
	 int *j;//pointer to int 
	 j = &i;//stores the address of i variable 
	 printf("Address of i variable is %u \n", j); 
	 j = j - 3; // decrementing pointer by 4*3=12 bytes 
	 printf("After increment: Address of i variable is %u \n",j); 
	}
</td></tr></table></pre>
<h4>Output</h4>
<pre><table style="border:2px solid green"><tr><td>
	Address of i variable is 65524 
	After increment: Address of i variable is 65512
</td></tr></table></pre>

<table style="border:2px solid green"><tr><td><a href="HomePage.htm">Home</a></td></tr></table>
</body>
</html>